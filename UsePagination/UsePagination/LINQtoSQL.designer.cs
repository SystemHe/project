#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace UsePagination
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="test")]
	public partial class LINQtoSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void Insert员工信息(员工信息 instance);
    partial void Update员工信息(员工信息 instance);
    partial void Delete员工信息(员工信息 instance);
    partial void Insert部门信息(部门信息 instance);
    partial void Update部门信息(部门信息 instance);
    partial void Delete部门信息(部门信息 instance);
    partial void Insert公司信息(公司信息 instance);
    partial void Update公司信息(公司信息 instance);
    partial void Delete公司信息(公司信息 instance);
    #endregion
		
		public LINQtoSQLDataContext() : 
				base(global::UsePagination.Properties.Settings.Default.testConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<员工信息> 员工信息
		{
			get
			{
				return this.GetTable<员工信息>();
			}
		}
		
		public System.Data.Linq.Table<部门信息> 部门信息
		{
			get
			{
				return this.GetTable<部门信息>();
			}
		}
		
		public System.Data.Linq.Table<公司信息> 公司信息
		{
			get
			{
				return this.GetTable<公司信息>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.员工信息")]
	public partial class 员工信息 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _员工编号;
		
		private string _员工姓名;
		
		private string _性别;
		
		private string _年龄;
		
		private string _电话;
		
		private string _地址;
		
		private string _邮箱;
		
		private string _员工状态;
		
		private EntitySet<部门信息> _部门信息;
		
		private EntitySet<公司信息> _公司信息;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On员工编号Changing(string value);
    partial void On员工编号Changed();
    partial void On员工姓名Changing(string value);
    partial void On员工姓名Changed();
    partial void On性别Changing(string value);
    partial void On性别Changed();
    partial void On年龄Changing(string value);
    partial void On年龄Changed();
    partial void On电话Changing(string value);
    partial void On电话Changed();
    partial void On地址Changing(string value);
    partial void On地址Changed();
    partial void On邮箱Changing(string value);
    partial void On邮箱Changed();
    partial void On员工状态Changing(string value);
    partial void On员工状态Changed();
    #endregion
		
		public 员工信息()
		{
			this._部门信息 = new EntitySet<部门信息>(new Action<部门信息>(this.attach_部门信息), new Action<部门信息>(this.detach_部门信息));
			this._公司信息 = new EntitySet<公司信息>(new Action<公司信息>(this.attach_公司信息), new Action<公司信息>(this.detach_公司信息));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_员工编号", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 员工编号
		{
			get
			{
				return this._员工编号;
			}
			set
			{
				if ((this._员工编号 != value))
				{
					this.On员工编号Changing(value);
					this.SendPropertyChanging();
					this._员工编号 = value;
					this.SendPropertyChanged("员工编号");
					this.On员工编号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_员工姓名", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string 员工姓名
		{
			get
			{
				return this._员工姓名;
			}
			set
			{
				if ((this._员工姓名 != value))
				{
					this.On员工姓名Changing(value);
					this.SendPropertyChanging();
					this._员工姓名 = value;
					this.SendPropertyChanged("员工姓名");
					this.On员工姓名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_性别", DbType="NChar(10)")]
		public string 性别
		{
			get
			{
				return this._性别;
			}
			set
			{
				if ((this._性别 != value))
				{
					this.On性别Changing(value);
					this.SendPropertyChanging();
					this._性别 = value;
					this.SendPropertyChanged("性别");
					this.On性别Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_年龄", DbType="NChar(10)")]
		public string 年龄
		{
			get
			{
				return this._年龄;
			}
			set
			{
				if ((this._年龄 != value))
				{
					this.On年龄Changing(value);
					this.SendPropertyChanging();
					this._年龄 = value;
					this.SendPropertyChanged("年龄");
					this.On年龄Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_电话", DbType="NChar(10)")]
		public string 电话
		{
			get
			{
				return this._电话;
			}
			set
			{
				if ((this._电话 != value))
				{
					this.On电话Changing(value);
					this.SendPropertyChanging();
					this._电话 = value;
					this.SendPropertyChanged("电话");
					this.On电话Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地址", DbType="NChar(10)")]
		public string 地址
		{
			get
			{
				return this._地址;
			}
			set
			{
				if ((this._地址 != value))
				{
					this.On地址Changing(value);
					this.SendPropertyChanging();
					this._地址 = value;
					this.SendPropertyChanged("地址");
					this.On地址Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_邮箱", DbType="NChar(10)")]
		public string 邮箱
		{
			get
			{
				return this._邮箱;
			}
			set
			{
				if ((this._邮箱 != value))
				{
					this.On邮箱Changing(value);
					this.SendPropertyChanging();
					this._邮箱 = value;
					this.SendPropertyChanged("邮箱");
					this.On邮箱Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_员工状态", DbType="NChar(10)")]
		public string 员工状态
		{
			get
			{
				return this._员工状态;
			}
			set
			{
				if ((this._员工状态 != value))
				{
					this.On员工状态Changing(value);
					this.SendPropertyChanging();
					this._员工状态 = value;
					this.SendPropertyChanged("员工状态");
					this.On员工状态Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="员工信息_部门信息", Storage="_部门信息", ThisKey="员工编号", OtherKey="员工编号")]
		public EntitySet<部门信息> 部门信息
		{
			get
			{
				return this._部门信息;
			}
			set
			{
				this._部门信息.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="员工信息_公司信息", Storage="_公司信息", ThisKey="员工编号", OtherKey="员工")]
		public EntitySet<公司信息> 公司信息
		{
			get
			{
				return this._公司信息;
			}
			set
			{
				this._公司信息.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_部门信息(部门信息 entity)
		{
			this.SendPropertyChanging();
			entity.员工信息 = this;
		}
		
		private void detach_部门信息(部门信息 entity)
		{
			this.SendPropertyChanging();
			entity.员工信息 = null;
		}
		
		private void attach_公司信息(公司信息 entity)
		{
			this.SendPropertyChanging();
			entity.员工信息 = this;
		}
		
		private void detach_公司信息(公司信息 entity)
		{
			this.SendPropertyChanging();
			entity.员工信息 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.部门信息")]
	public partial class 部门信息 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _部门编号;
		
		private string _部门名称;
		
		private string _员工编号;
		
		private string _公司编号;
		
		private EntitySet<公司信息> _公司信息;
		
		private EntityRef<员工信息> _员工信息;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On部门编号Changing(string value);
    partial void On部门编号Changed();
    partial void On部门名称Changing(string value);
    partial void On部门名称Changed();
    partial void On员工编号Changing(string value);
    partial void On员工编号Changed();
    partial void On公司编号Changing(string value);
    partial void On公司编号Changed();
    #endregion
		
		public 部门信息()
		{
			this._公司信息 = new EntitySet<公司信息>(new Action<公司信息>(this.attach_公司信息), new Action<公司信息>(this.detach_公司信息));
			this._员工信息 = default(EntityRef<员工信息>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_部门编号", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 部门编号
		{
			get
			{
				return this._部门编号;
			}
			set
			{
				if ((this._部门编号 != value))
				{
					this.On部门编号Changing(value);
					this.SendPropertyChanging();
					this._部门编号 = value;
					this.SendPropertyChanged("部门编号");
					this.On部门编号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_部门名称", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string 部门名称
		{
			get
			{
				return this._部门名称;
			}
			set
			{
				if ((this._部门名称 != value))
				{
					this.On部门名称Changing(value);
					this.SendPropertyChanging();
					this._部门名称 = value;
					this.SendPropertyChanged("部门名称");
					this.On部门名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_员工编号", DbType="NChar(10)")]
		public string 员工编号
		{
			get
			{
				return this._员工编号;
			}
			set
			{
				if ((this._员工编号 != value))
				{
					if (this._员工信息.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On员工编号Changing(value);
					this.SendPropertyChanging();
					this._员工编号 = value;
					this.SendPropertyChanged("员工编号");
					this.On员工编号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_公司编号", DbType="NChar(10)")]
		public string 公司编号
		{
			get
			{
				return this._公司编号;
			}
			set
			{
				if ((this._公司编号 != value))
				{
					this.On公司编号Changing(value);
					this.SendPropertyChanging();
					this._公司编号 = value;
					this.SendPropertyChanged("公司编号");
					this.On公司编号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="部门信息_公司信息", Storage="_公司信息", ThisKey="部门编号", OtherKey="公司部门")]
		public EntitySet<公司信息> 公司信息
		{
			get
			{
				return this._公司信息;
			}
			set
			{
				this._公司信息.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="员工信息_部门信息", Storage="_员工信息", ThisKey="员工编号", OtherKey="员工编号", IsForeignKey=true)]
		public 员工信息 员工信息
		{
			get
			{
				return this._员工信息.Entity;
			}
			set
			{
				员工信息 previousValue = this._员工信息.Entity;
				if (((previousValue != value) 
							|| (this._员工信息.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._员工信息.Entity = null;
						previousValue.部门信息.Remove(this);
					}
					this._员工信息.Entity = value;
					if ((value != null))
					{
						value.部门信息.Add(this);
						this._员工编号 = value.员工编号;
					}
					else
					{
						this._员工编号 = default(string);
					}
					this.SendPropertyChanged("员工信息");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_公司信息(公司信息 entity)
		{
			this.SendPropertyChanging();
			entity.部门信息 = this;
		}
		
		private void detach_公司信息(公司信息 entity)
		{
			this.SendPropertyChanging();
			entity.部门信息 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.公司信息")]
	public partial class 公司信息 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _公司编号;
		
		private string _公司名称;
		
		private string _公司部门;
		
		private string _员工;
		
		private EntityRef<部门信息> _部门信息;
		
		private EntityRef<员工信息> _员工信息;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On公司编号Changing(string value);
    partial void On公司编号Changed();
    partial void On公司名称Changing(string value);
    partial void On公司名称Changed();
    partial void On公司部门Changing(string value);
    partial void On公司部门Changed();
    partial void On员工Changing(string value);
    partial void On员工Changed();
    #endregion
		
		public 公司信息()
		{
			this._部门信息 = default(EntityRef<部门信息>);
			this._员工信息 = default(EntityRef<员工信息>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_公司编号", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string 公司编号
		{
			get
			{
				return this._公司编号;
			}
			set
			{
				if ((this._公司编号 != value))
				{
					this.On公司编号Changing(value);
					this.SendPropertyChanging();
					this._公司编号 = value;
					this.SendPropertyChanged("公司编号");
					this.On公司编号Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_公司名称", DbType="NChar(10)")]
		public string 公司名称
		{
			get
			{
				return this._公司名称;
			}
			set
			{
				if ((this._公司名称 != value))
				{
					this.On公司名称Changing(value);
					this.SendPropertyChanging();
					this._公司名称 = value;
					this.SendPropertyChanged("公司名称");
					this.On公司名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_公司部门", DbType="NChar(10)")]
		public string 公司部门
		{
			get
			{
				return this._公司部门;
			}
			set
			{
				if ((this._公司部门 != value))
				{
					if (this._部门信息.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On公司部门Changing(value);
					this.SendPropertyChanging();
					this._公司部门 = value;
					this.SendPropertyChanged("公司部门");
					this.On公司部门Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_员工", DbType="NChar(10)")]
		public string 员工
		{
			get
			{
				return this._员工;
			}
			set
			{
				if ((this._员工 != value))
				{
					if (this._员工信息.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On员工Changing(value);
					this.SendPropertyChanging();
					this._员工 = value;
					this.SendPropertyChanged("员工");
					this.On员工Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="部门信息_公司信息", Storage="_部门信息", ThisKey="公司部门", OtherKey="部门编号", IsForeignKey=true)]
		public 部门信息 部门信息
		{
			get
			{
				return this._部门信息.Entity;
			}
			set
			{
				部门信息 previousValue = this._部门信息.Entity;
				if (((previousValue != value) 
							|| (this._部门信息.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._部门信息.Entity = null;
						previousValue.公司信息.Remove(this);
					}
					this._部门信息.Entity = value;
					if ((value != null))
					{
						value.公司信息.Add(this);
						this._公司部门 = value.部门编号;
					}
					else
					{
						this._公司部门 = default(string);
					}
					this.SendPropertyChanged("部门信息");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="员工信息_公司信息", Storage="_员工信息", ThisKey="员工", OtherKey="员工编号", IsForeignKey=true)]
		public 员工信息 员工信息
		{
			get
			{
				return this._员工信息.Entity;
			}
			set
			{
				员工信息 previousValue = this._员工信息.Entity;
				if (((previousValue != value) 
							|| (this._员工信息.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._员工信息.Entity = null;
						previousValue.公司信息.Remove(this);
					}
					this._员工信息.Entity = value;
					if ((value != null))
					{
						value.公司信息.Add(this);
						this._员工 = value.员工编号;
					}
					else
					{
						this._员工 = default(string);
					}
					this.SendPropertyChanged("员工信息");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
