//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM 关系源元数据

[assembly: EdmRelationshipAttribute("testModel", "FK_部门信息_员工信息", "员工信息", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SqlConnectDemo3.员工信息), "部门信息", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SqlConnectDemo3.部门信息), true)]
[assembly: EdmRelationshipAttribute("testModel", "FK_公司信息_部门信息", "部门信息", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SqlConnectDemo3.部门信息), "公司信息", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SqlConnectDemo3.公司信息), true)]
[assembly: EdmRelationshipAttribute("testModel", "FK_公司信息_员工信息", "员工信息", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SqlConnectDemo3.员工信息), "公司信息", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SqlConnectDemo3.公司信息), true)]

#endregion

namespace SqlConnectDemo3
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class testEntities : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“testEntities”部分中的连接字符串初始化新 testEntities 对象。
        /// </summary>
        public testEntities() : base("name=testEntities", "testEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 testEntities 对象。
        /// </summary>
        public testEntities(string connectionString) : base(connectionString, "testEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 testEntities 对象。
        /// </summary>
        public testEntities(EntityConnection connection) : base(connection, "testEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<sysdiagrams> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagrams>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagrams> _sysdiagrams;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<部门信息> 部门信息
        {
            get
            {
                if ((_部门信息 == null))
                {
                    _部门信息 = base.CreateObjectSet<部门信息>("部门信息");
                }
                return _部门信息;
            }
        }
        private ObjectSet<部门信息> _部门信息;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<公司信息> 公司信息
        {
            get
            {
                if ((_公司信息 == null))
                {
                    _公司信息 = base.CreateObjectSet<公司信息>("公司信息");
                }
                return _公司信息;
            }
        }
        private ObjectSet<公司信息> _公司信息;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<员工信息> 员工信息
        {
            get
            {
                if ((_员工信息 == null))
                {
                    _员工信息 = base.CreateObjectSet<员工信息>("员工信息");
                }
                return _员工信息;
            }
        }
        private ObjectSet<员工信息> _员工信息;

        #endregion

        #region AddTo 方法
    
        /// <summary>
        /// 用于向 sysdiagrams EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTosysdiagrams(sysdiagrams sysdiagrams)
        {
            base.AddObject("sysdiagrams", sysdiagrams);
        }
    
        /// <summary>
        /// 用于向 部门信息 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo部门信息(部门信息 部门信息)
        {
            base.AddObject("部门信息", 部门信息);
        }
    
        /// <summary>
        /// 用于向 公司信息 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo公司信息(公司信息 公司信息)
        {
            base.AddObject("公司信息", 公司信息);
        }
    
        /// <summary>
        /// 用于向 员工信息 EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddTo员工信息(员工信息 员工信息)
        {
            base.AddObject("员工信息", 员工信息);
        }

        #endregion

    }

    #endregion

    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="testModel", Name="sysdiagrams")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagrams : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 sysdiagrams 对象。
        /// </summary>
        /// <param name="name">name 属性的初始值。</param>
        /// <param name="principal_id">principal_id 属性的初始值。</param>
        /// <param name="diagram_id">diagram_id 属性的初始值。</param>
        public static sysdiagrams Createsysdiagrams(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagrams sysdiagrams = new sysdiagrams();
            sysdiagrams.name = name;
            sysdiagrams.principal_id = principal_id;
            sysdiagrams.diagram_id = diagram_id;
            return sysdiagrams;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="testModel", Name="部门信息")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 部门信息 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 部门信息 对象。
        /// </summary>
        /// <param name="部门编号">部门编号 属性的初始值。</param>
        /// <param name="部门名称">部门名称 属性的初始值。</param>
        public static 部门信息 Create部门信息(global::System.String 部门编号, global::System.String 部门名称)
        {
            部门信息 部门信息 = new 部门信息();
            部门信息.部门编号 = 部门编号;
            部门信息.部门名称 = 部门名称;
            return 部门信息;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 部门编号
        {
            get
            {
                return _部门编号;
            }
            set
            {
                if (_部门编号 != value)
                {
                    On部门编号Changing(value);
                    ReportPropertyChanging("部门编号");
                    _部门编号 = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("部门编号");
                    On部门编号Changed();
                }
            }
        }
        private global::System.String _部门编号;
        partial void On部门编号Changing(global::System.String value);
        partial void On部门编号Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 部门名称
        {
            get
            {
                return _部门名称;
            }
            set
            {
                On部门名称Changing(value);
                ReportPropertyChanging("部门名称");
                _部门名称 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("部门名称");
                On部门名称Changed();
            }
        }
        private global::System.String _部门名称;
        partial void On部门名称Changing(global::System.String value);
        partial void On部门名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 员工编号
        {
            get
            {
                return _员工编号;
            }
            set
            {
                On员工编号Changing(value);
                ReportPropertyChanging("员工编号");
                _员工编号 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("员工编号");
                On员工编号Changed();
            }
        }
        private global::System.String _员工编号;
        partial void On员工编号Changing(global::System.String value);
        partial void On员工编号Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 公司编号
        {
            get
            {
                return _公司编号;
            }
            set
            {
                On公司编号Changing(value);
                ReportPropertyChanging("公司编号");
                _公司编号 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("公司编号");
                On公司编号Changed();
            }
        }
        private global::System.String _公司编号;
        partial void On公司编号Changing(global::System.String value);
        partial void On公司编号Changed();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("testModel", "FK_部门信息_员工信息", "员工信息")]
        public 员工信息 员工信息
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<员工信息>("testModel.FK_部门信息_员工信息", "员工信息").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<员工信息>("testModel.FK_部门信息_员工信息", "员工信息").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<员工信息> 员工信息Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<员工信息>("testModel.FK_部门信息_员工信息", "员工信息");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<员工信息>("testModel.FK_部门信息_员工信息", "员工信息", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("testModel", "FK_公司信息_部门信息", "公司信息")]
        public EntityCollection<公司信息> 公司信息
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<公司信息>("testModel.FK_公司信息_部门信息", "公司信息");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<公司信息>("testModel.FK_公司信息_部门信息", "公司信息", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="testModel", Name="公司信息")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 公司信息 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 公司信息 对象。
        /// </summary>
        /// <param name="公司编号">公司编号 属性的初始值。</param>
        public static 公司信息 Create公司信息(global::System.String 公司编号)
        {
            公司信息 公司信息 = new 公司信息();
            公司信息.公司编号 = 公司编号;
            return 公司信息;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 公司编号
        {
            get
            {
                return _公司编号;
            }
            set
            {
                if (_公司编号 != value)
                {
                    On公司编号Changing(value);
                    ReportPropertyChanging("公司编号");
                    _公司编号 = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("公司编号");
                    On公司编号Changed();
                }
            }
        }
        private global::System.String _公司编号;
        partial void On公司编号Changing(global::System.String value);
        partial void On公司编号Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 公司名称
        {
            get
            {
                return _公司名称;
            }
            set
            {
                On公司名称Changing(value);
                ReportPropertyChanging("公司名称");
                _公司名称 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("公司名称");
                On公司名称Changed();
            }
        }
        private global::System.String _公司名称;
        partial void On公司名称Changing(global::System.String value);
        partial void On公司名称Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 公司部门
        {
            get
            {
                return _公司部门;
            }
            set
            {
                On公司部门Changing(value);
                ReportPropertyChanging("公司部门");
                _公司部门 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("公司部门");
                On公司部门Changed();
            }
        }
        private global::System.String _公司部门;
        partial void On公司部门Changing(global::System.String value);
        partial void On公司部门Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 员工
        {
            get
            {
                return _员工;
            }
            set
            {
                On员工Changing(value);
                ReportPropertyChanging("员工");
                _员工 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("员工");
                On员工Changed();
            }
        }
        private global::System.String _员工;
        partial void On员工Changing(global::System.String value);
        partial void On员工Changed();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("testModel", "FK_公司信息_部门信息", "部门信息")]
        public 部门信息 部门信息
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门信息>("testModel.FK_公司信息_部门信息", "部门信息").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门信息>("testModel.FK_公司信息_部门信息", "部门信息").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<部门信息> 部门信息Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<部门信息>("testModel.FK_公司信息_部门信息", "部门信息");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<部门信息>("testModel.FK_公司信息_部门信息", "部门信息", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("testModel", "FK_公司信息_员工信息", "员工信息")]
        public 员工信息 员工信息
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<员工信息>("testModel.FK_公司信息_员工信息", "员工信息").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<员工信息>("testModel.FK_公司信息_员工信息", "员工信息").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<员工信息> 员工信息Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<员工信息>("testModel.FK_公司信息_员工信息", "员工信息");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<员工信息>("testModel.FK_公司信息_员工信息", "员工信息", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="testModel", Name="员工信息")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class 员工信息 : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 员工信息 对象。
        /// </summary>
        /// <param name="员工编号">员工编号 属性的初始值。</param>
        /// <param name="员工姓名">员工姓名 属性的初始值。</param>
        public static 员工信息 Create员工信息(global::System.String 员工编号, global::System.String 员工姓名)
        {
            员工信息 员工信息 = new 员工信息();
            员工信息.员工编号 = 员工编号;
            员工信息.员工姓名 = 员工姓名;
            return 员工信息;
        }

        #endregion

        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 员工编号
        {
            get
            {
                return _员工编号;
            }
            set
            {
                if (_员工编号 != value)
                {
                    On员工编号Changing(value);
                    ReportPropertyChanging("员工编号");
                    _员工编号 = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("员工编号");
                    On员工编号Changed();
                }
            }
        }
        private global::System.String _员工编号;
        partial void On员工编号Changing(global::System.String value);
        partial void On员工编号Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String 员工姓名
        {
            get
            {
                return _员工姓名;
            }
            set
            {
                On员工姓名Changing(value);
                ReportPropertyChanging("员工姓名");
                _员工姓名 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("员工姓名");
                On员工姓名Changed();
            }
        }
        private global::System.String _员工姓名;
        partial void On员工姓名Changing(global::System.String value);
        partial void On员工姓名Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 性别
        {
            get
            {
                return _性别;
            }
            set
            {
                On性别Changing(value);
                ReportPropertyChanging("性别");
                _性别 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("性别");
                On性别Changed();
            }
        }
        private global::System.String _性别;
        partial void On性别Changing(global::System.String value);
        partial void On性别Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 年龄
        {
            get
            {
                return _年龄;
            }
            set
            {
                On年龄Changing(value);
                ReportPropertyChanging("年龄");
                _年龄 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("年龄");
                On年龄Changed();
            }
        }
        private global::System.String _年龄;
        partial void On年龄Changing(global::System.String value);
        partial void On年龄Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 电话
        {
            get
            {
                return _电话;
            }
            set
            {
                On电话Changing(value);
                ReportPropertyChanging("电话");
                _电话 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("电话");
                On电话Changed();
            }
        }
        private global::System.String _电话;
        partial void On电话Changing(global::System.String value);
        partial void On电话Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 地址
        {
            get
            {
                return _地址;
            }
            set
            {
                On地址Changing(value);
                ReportPropertyChanging("地址");
                _地址 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("地址");
                On地址Changed();
            }
        }
        private global::System.String _地址;
        partial void On地址Changing(global::System.String value);
        partial void On地址Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 邮箱
        {
            get
            {
                return _邮箱;
            }
            set
            {
                On邮箱Changing(value);
                ReportPropertyChanging("邮箱");
                _邮箱 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("邮箱");
                On邮箱Changed();
            }
        }
        private global::System.String _邮箱;
        partial void On邮箱Changing(global::System.String value);
        partial void On邮箱Changed();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String 员工状态
        {
            get
            {
                return _员工状态;
            }
            set
            {
                On员工状态Changing(value);
                ReportPropertyChanging("员工状态");
                _员工状态 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("员工状态");
                On员工状态Changed();
            }
        }
        private global::System.String _员工状态;
        partial void On员工状态Changing(global::System.String value);
        partial void On员工状态Changed();

        #endregion

    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("testModel", "FK_部门信息_员工信息", "部门信息")]
        public EntityCollection<部门信息> 部门信息
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<部门信息>("testModel.FK_部门信息_员工信息", "部门信息");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<部门信息>("testModel.FK_部门信息_员工信息", "部门信息", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("testModel", "FK_公司信息_员工信息", "公司信息")]
        public EntityCollection<公司信息> 公司信息
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<公司信息>("testModel.FK_公司信息_员工信息", "公司信息");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<公司信息>("testModel.FK_公司信息_员工信息", "公司信息", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
